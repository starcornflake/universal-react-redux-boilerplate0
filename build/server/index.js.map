{"version":3,"sources":["../../src/server/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAM,MAAM,wBAAN;AACN,IAAM,OAAO,QAAQ,GAAR,CAAY,IAAZ,IAAoB,iBAAO,MAAP,CAAc,IAAd;;AAEjC,IAAI,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,EAAuC;AACzC,MAAM,UAAU,QAAQ,SAAR,CAAV,CADmC;AAEzC,MAAM,uBAAuB,QAAQ,wBAAR,CAAvB,CAFmC;AAGzC,MAAM,mBAAmB,QAAQ,0BAAR,CAAnB,CAHmC;AAIzC,MAAM,WAAW,QAAQ,gBAAR,CAAX,CAJmC;AAKzC,MAAI,GAAJ,CAAQ,qBAAqB,QAArB,EAA+B;AACrC,YAAQ,IAAR;AACA,gBAAY,iBAAiB,MAAjB,CAAwB,UAAxB;AACZ,SAAK,KAAL;GAHM,CAAR,EALyC;AAUzC,MAAI,GAAJ,CAAQ,sBAAO,KAAP,CAAR,EAVyC;CAA3C,MAWO,EAXP;;AAeA,IAAI,GAAJ,CAAQ,SAAR,EAAmB,kBAAQ,MAAR,CAAe,eAAK,OAAL,CAAa,SAAb,EAAwB,cAAxB,CAAf,CAAnB;AACA,IAAI,GAAJ,CAAQ,4BAAQ,eAAK,IAAL,CAAU,SAAV,EAAqB,0BAArB,CAAR,CAAR;;AAEA,IAAI,GAAJ,CAAQ,GAAR,EAAa,YAAb;;;;;;AAMA,SAAS,YAAT,CAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC;AACnC,0BAAM,EAAE,wBAAF,EAAU,UAAU,IAAI,GAAJ,EAA1B,EAAqC,UAAC,GAAD,EAAM,QAAN,EAAgB,KAAhB,EAA0B;AAC7D,QAAI,GAAJ,EAAS;;AAEP,UAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,IAAI,OAAJ,CAArB,CAFO;KAAT,MAGO,IAAI,QAAJ,EAAc;AACnB,UAAI,QAAJ,CAAa,SAAS,QAAT,GAAoB,SAAS,MAAT,CAAjC,CADmB;KAAd,MAEA,IAAI,KAAJ,EAAW;;AAEhB,UAAM,QAAQ,+BAAR,CAFU;;AAIhB,cAAQ,GAAR,CAAY,MAAM,UAAN,CAAZ,CAJgB;;AAMhB,UAAM,UAAU,4BACd;;UAAM,OAAO,KAAP,EAAN;QACE,0DAAmB,KAAnB,CADF;OADc,CAAV,CANU;;AAYhB,UAAI,IAAJ,CAAS,eAAe,OAAf,EAAwB,MAAM,QAAN,EAAxB,CAAT,EAZgB;KAAX,MAaA;;AAEL,UAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,WAArB,EAFK;KAbA;GAN4B,CAArC,CADmC;CAArC;;AA2BA,SAAS,cAAT,CAAwB,IAAxB,EAA8B,YAA9B,EAA4C;AAC1C,mKAOuB,+DACoB,KAAK,SAAL,CAAe,YAAf,oDACX,iBAAO,QAAP,kDAThC,CAD0C;CAA5C;;AAgBA,IAAI,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACrB,MAAI,QAAQ,GAAR,CAAY,OAAZ,KAAwB,SAAxB,EAAmC;AACrC,YAAQ,GAAR,CAAe,QAAQ,GAAR,CAAY,QAAZ,gCAA+C,8BAA9D,EADqC;GAAvC,MAEO,IAAI,QAAQ,GAAR,CAAY,OAAZ,KAAwB,UAAxB,EAAoC;AAC7C,YAAQ,GAAR,CAAe,QAAQ,GAAR,CAAY,QAAZ,gCAA+C,oBAA9D,EAD6C;GAAxC,MAEA;AACL,YAAQ,GAAR,CAAe,QAAQ,GAAR,CAAY,QAAZ,gCAA+C,UAA9D,EADK;GAFA;CAHQ,CAAjB","file":"index.js","sourcesContent":["import 'babel-polyfill'\nimport path from 'path'\nimport express from 'express'\nimport morgan from 'morgan'\nimport React from 'react'\nimport { renderToString } from 'react-dom/server'\nimport { match, RouterContext } from 'react-router'\nimport favicon from 'serve-favicon'\n\nimport config from './config'\nimport Root from '../common/components/Root'\nimport configureStore from '../common/store/configureStore'\nimport routes from '../common/config/routes'\n\nconst app = express()\nconst port = process.env.PORT || config.server.port\n\nif (process.env.NODE_ENV !== 'production') {\n  const webpack = require('webpack')\n  const webpackDevMiddleware = require('webpack-dev-middleware')\n  const webpackConfigDev = require('../../webpack.config.dev')\n  const compiler = webpack(webpackConfigDev)\n  app.use(webpackDevMiddleware(compiler, {\n    noInfo: true,\n    publicPath: webpackConfigDev.output.publicPath,\n    hot: false\n  }))\n  app.use(morgan('dev'))\n} else {\n\n}\n\napp.use('/public', express.static(path.resolve(__dirname, '../../public')))\napp.use(favicon(path.join(__dirname, '../../public/favicon.ico')))\n\napp.get('*', handleRender)\n\n// function handleRender(req, res, err) {\n//   res.send(renderFullPage());\n// }\n\nfunction handleRender(req, res, err) {\n  match({ routes, location: req.url }, (err, redirect, props) => {\n    if (err) {\n      // error during route matching\n      res.status(500).send(err.message)\n    } else if (redirect) {\n      res.redirect(redirect.pathname + redirect.search)\n    } else if (props) {\n      // we have a match\n      const store = configureStore()\n\n      console.log(props.components)\n\n      const appHtml = renderToString(\n        <Root store={store}>\n          <RouterContext {...props} />\n        </Root>\n      )\n\n      res.send(renderFullPage(appHtml, store.getState()))\n    } else {\n      // no match\n      res.status(404).send('Not Found')\n    }\n  })\n}\n\nfunction renderFullPage(html, initialState) {\n  return `\n    <!doctype html>\n    <html>\n      <head>\n        <title>Redux Universal Example</title>\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script>window.__INITIAL_STATE__ = ${JSON.stringify(initialState)}</script>\n        <script src=\"/public/js/${config.jsBundle}\"></script>\n      </body>\n    </html>\n    `\n}\n\napp.listen(port, () => {\n  if (process.env.NODEMON === 'enabled') {\n    console.log(`${process.env.NODE_ENV} server started on port ${port}. (webpack + nodemon)`)\n  } else if (process.env.NODEMON === 'disabled') {\n    console.log(`${process.env.NODE_ENV} server started on port ${port}. (webpack)`)\n  } else {\n    console.log(`${process.env.NODE_ENV} server started on port ${port}.`)\n  }\n})\n"]}